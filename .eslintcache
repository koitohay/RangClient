[{"C:\\webapp\\RangClient\\src\\index.js":"1","C:\\webapp\\RangClient\\src\\reportWebVitals.js":"2","C:\\webapp\\RangClient\\src\\App.js":"3","C:\\webapp\\RangClient\\src\\pages\\signup.js":"4","C:\\webapp\\RangClient\\src\\pages\\home.js":"5","C:\\webapp\\RangClient\\src\\pages\\login.js":"6","C:\\webapp\\RangClient\\src\\services\\firebase.js":"7","C:\\webapp\\RangClient\\src\\pages\\lobby.js":"8","C:\\webapp\\RangClient\\src\\pages\\playarea.js":"9","C:\\webapp\\RangClient\\src\\helpers\\gatherings.js":"10","C:\\webapp\\RangClient\\src\\helpers\\auth.js":"11"},{"size":500,"mtime":1608320061558,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1608320061558,"results":"14","hashOfConfig":"13"},{"size":2568,"mtime":1610368703629,"results":"15","hashOfConfig":"13"},{"size":2673,"mtime":1609185071704,"results":"16","hashOfConfig":"13"},{"size":995,"mtime":1609176412625,"results":"17","hashOfConfig":"13"},{"size":3411,"mtime":1609591281612,"results":"18","hashOfConfig":"13"},{"size":420,"mtime":1609197049200,"results":"19","hashOfConfig":"13"},{"size":3476,"mtime":1609953874700,"results":"20","hashOfConfig":"13"},{"size":17797,"mtime":1610487890276,"results":"21","hashOfConfig":"13"},{"size":2240,"mtime":1609198012411,"results":"22","hashOfConfig":"13"},{"size":335,"mtime":1609184585943,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1cqknde",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\webapp\\RangClient\\src\\index.js",[],["52","53"],"C:\\webapp\\RangClient\\src\\reportWebVitals.js",[],"C:\\webapp\\RangClient\\src\\App.js",["54"],"import React, { Component } from 'react';\nimport {\n  Route,\n  BrowserRouter as Router,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './pages/home';\nimport Login from './pages/login';\nimport Signup from './pages/signup';\nimport Playarea from './pages/playarea';\nimport { auth } from './services/firebase';\nimport Lobby from './pages/lobby';\nfunction PrivateRoute({ component: Component, authenticated, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={(props) => authenticated === true\n        ? <Component {...props} />\n        : <Redirect to={{ pathname: '/login', state: { from: props.location } }} />}\n    />\n  )\n}\n\nfunction PublicRoute({ component: Component, authenticated, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={(props) => authenticated === false\n        ? <Component {...props} />\n        : <Redirect to='/playarea' />}\n    />\n  )\n}\n\nclass App extends Component  {\n\n  constructor() {\n    super();\n    this.state = {\n        authenticated: false,\n        loading: true\n    };\n}\n\ncomponentDidMount() {\n  auth().onAuthStateChanged(user => {\n      if (user) {\n          this.setState({\n              authenticated: true,\n              loading: false\n          });\n      } else {\n          this.setState({\n              authenticated: false,\n              loading: false\n          });\n      }\n  });\n\n}\n\nrender() {\n  return this.state.loading === true ? (\n      <div className=\"spinner-border text-success\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n      </div>\n  ) : (\n \n          <Router>\n              <Switch>\n                  <Route exact path=\"/\" component={Home} />\n                  <PrivateRoute\n                      path=\"/playarea\"\n                      authenticated={this.state.authenticated}\n                      component={Playarea}\n                  />\n                  <PrivateRoute\n                      path=\"/lobby\"\n                      authenticated={this.state.authenticated}\n                      component={Lobby}\n                  />\n                  <PublicRoute\n                      path=\"/signup\"\n                      authenticated={this.state.authenticated}\n                      component={Signup}\n                  />\n                  <PublicRoute\n                      path=\"/login\"\n                      authenticated={this.state.authenticated}\n                      component={Login}\n                  />\n              </Switch>\n          </Router>\n      );\n}\n\n}\n\n\nexport default App;","C:\\webapp\\RangClient\\src\\pages\\signup.js",[],"C:\\webapp\\RangClient\\src\\pages\\home.js",[],"C:\\webapp\\RangClient\\src\\pages\\login.js",[],"C:\\webapp\\RangClient\\src\\services\\firebase.js",["55"],"import firebase from 'firebase';\r\nimport { Gathering } from \"../helpers/gatherings\";\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyAn0LlQHl-1GB2VzOTU-8MJgpgdlRA6A38\",\r\n    authDomain: \"testproject-ac512.firebaseapp.com\",\r\n    databaseURL: \"https://testproject-ac512-default-rtdb.europe-west1.firebasedatabase.app\"\r\n};\r\nfirebase.initializeApp(config);\r\nexport const auth = firebase.auth;\r\nexport const db = firebase.database();","C:\\webapp\\RangClient\\src\\pages\\lobby.js",["56","57","58"],"import React, { Component} from 'react';\r\nimport { auth } from \"../services/firebase\";\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nconst ENDPOINT = \"http://127.0.0.1:4100\";\r\nlet connectionOptions = {\r\n    \"force new connection\": true,\r\n    \"reconnectionAttempts\": \"Infinity\", //avoid having user reconnect manually in order to prevent dead clients after a server restart\r\n    \"timeout\": 10000,                  //before connect_error and connect_timeout are emitted.\r\n    \"transports\": [\"websocket\"]\r\n};\r\nexport default class Lobby extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            code: null,\r\n            roomCode: null,\r\n            user: auth().currentUser,\r\n            isLoaded: true,\r\n            items: null,\r\n            response: null\r\n        };\r\n\r\n\r\n        this.CreateRoom = this.CreateRoom.bind(this);\r\n        this.JoinRoom = this.JoinRoom.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        console.log(\"App called\");\r\n        localStorage.setItem('counter', \"0\");\r\n        \r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({\r\n            roomCode: event.target.value\r\n        });\r\n    }\r\n\r\n    async CreateRoom() {\r\n        const randomcode = Math.floor(Math.random() * 100000) + 1;\r\n        this.setState({\r\n            code: randomcode,\r\n        }\r\n        );\r\n        // const requestOptions = {\r\n        //     method: 'POST',\r\n        //     headers: { 'Content-Type': 'application/json' },\r\n        //     body: JSON.stringify({id: 0, name: this.state.user.email, room: randomcode.toString(), active: true })\r\n        // };\r\n\r\n        // const response = await fetch(\"https://localhost:5001/api/usercontroller\", requestOptions)\r\n        // const data = await response.json();\r\n\r\n        // console.log(data);\r\n        this.props.history.push(`/playarea/${randomcode}`)\r\n\r\n    }\r\n\r\n    JoinRoom() {\r\n        this.props.history.push(`/playarea/${this.state.roomCode}`)\r\n    }\r\n\r\n    componentDidMount() {\r\n        // const socket = socketIOClient(ENDPOINT, connectionOptions);\r\n\r\n        // socket.on(\"cardShuffled\", data => {\r\n        //     this.setState({cards: data});\r\n        // });\r\n    }\r\n    render() {\r\n\r\n        // useEffect(() => {\r\n            \r\n        // }, []);\r\n        return (\r\n\r\n            <div className=\"form-group col-3\">\r\n                <p>\r\n                    It's <time dateTime={this.state.response}>{this.state.response}</time>\r\n                </p>\r\n                <div>\r\n                    <h1>\r\n                        {this.state.code}\r\n                    </h1>\r\n                    <div class=\"row\">\r\n                        <button className=\"btn btn-primary px-5\" onClick={this.CreateRoom}>\r\n                            Create Room\r\n                    </button>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-12\" style={{ 'height': 20 }}></div>\r\n                    </div>\r\n\r\n                    <div class=\"row\">\r\n\r\n                        <input type=\"text\" id=\"roomNumber\" className=\"form-control\" name=\"roomNumber\" onChange={this.handleChange} value={this.state.roomCode}></input>\r\n                        <button className=\"btn btn-primary px-5\" onClick={this.JoinRoom}>\r\n                            Join Room\r\n                    </button>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}","C:\\webapp\\RangClient\\src\\pages\\playarea.js",["59","60","61","62","63","64","65","66","67","68","69","70","71","72","73"],"import React, { Component, useContext, useEffect } from 'react';\r\nimport greenImg from '../icons/iconfinder_Circle_Green_34211.png';\r\nimport '../styles.css';\r\nimport { auth } from \"../services/firebase\";\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nconst ENDPOINT = \"http://127.0.0.1:4100\";\r\nlet connectionOptions = {\r\n    \"force new connection\": true,\r\n    \"reconnectionAttempts\": \"Infinity\", //avoid having user reconnect manually in order to prevent dead clients after a server restart\r\n    \"timeout\": 10000,                  //before connect_error and connect_timeout are emitted.\r\n    \"transports\": [\"websocket\"]\r\n};\r\nconst Results = () => (\r\n    <img src={greenImg} style={{ width: \"16px\", height: \"16px\" }} />\r\n);\r\n\r\nlet socket = null;\r\nclass Playarea extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: auth().currentUser,\r\n            error: null,\r\n            players: [],\r\n            Cards: [],\r\n            playerId: null,\r\n            activeCard: null,\r\n            showPlayArea: false,\r\n            roomCode: null,\r\n            myRole: '',\r\n            noOfPlayers: 0,\r\n            gameId: null,\r\n            socketId: null,\r\n            playerTurn: 0,\r\n            message: ''\r\n        };\r\n\r\n        this.showCard = this.showCard.bind(this);\r\n        this.CreateRoom = this.CreateRoom.bind(this);\r\n\r\n        this.onRoomCreated = this.onRoomCreated.bind(this);\r\n        this.onPlayerJoined = this.onPlayerJoined.bind(this);\r\n        this.beginNewGame = this.beginNewGame.bind(this);\r\n        this.roomfull = this.roomfull.bind(this);\r\n        this.mapToCardText = this.mapToCardText.bind(this);\r\n\r\n        this.cardDealForPlayers = this.cardDealForPlayers.bind(this);\r\n        this.updatePlayerId = this.updatePlayerId.bind(this);\r\n        this.updateOtherPlayerCard = this.updateOtherPlayerCard.bind(this);\r\n        this.yourTurn = this.yourTurn.bind(this);\r\n        this.whoWonRound = this.whoWonRound.bind(this);\r\n\r\n        this.JoinRoom = this.JoinRoom.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('componetnmount called  ');\r\n        socket = socketIOClient(ENDPOINT, connectionOptions);\r\n\r\n        // room created\r\n        socket.on('newGameCreated', this.onRoomCreated);\r\n\r\n        // room created\r\n        socket.on('playerJoinedRoom', this.onPlayerJoined);\r\n\r\n        // begin new game\r\n        socket.on('beginNewGame', this.beginNewGame);\r\n        socket.on('yourTurn', this.yourTurn);\r\n\r\n        // deal cards for players\r\n        socket.on('cardDealForPlayers', this.cardDealForPlayers);\r\n        socket.on('updatePlayerId', this.updatePlayerId);\r\n        socket.on('updateOtherPlayerCard', this.updateOtherPlayerCard);\r\n        socket.on('whoWonRound', this.whoWonRound);\r\n\r\n        //room full start game\r\n        socket.on('roomfull', this.roomfull);\r\n\r\n        // Error event\r\n        socket.on('error', (e) => {\r\n            console.error(e);\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n    }\r\n\r\n    showCard(card, playerId, stopEmit) {\r\n\r\n        if (playerId != this.state.playerTurn)\r\n            return;\r\n\r\n        var arrayOfCards = [...this.state.Cards];\r\n        var indexOfCard = arrayOfCards.indexOf(card);\r\n        if (indexOfCard !== -1) {\r\n            arrayOfCards.splice(indexOfCard, 1);\r\n            this.setState({ Cards: arrayOfCards });\r\n        }\r\n        \r\n        switch (playerId) {\r\n            case 1:\r\n                this.setState({ activeCard: card });\r\n                break;\r\n            case 2:\r\n                this.setState({ activeCardPlayer02: card });\r\n                break;\r\n            case 3:\r\n                this.setState({ activeCardPlayer03: card });\r\n                break;\r\n            case 4:\r\n                this.setState({ activeCardPlayer04: card });\r\n                break;\r\n            default:\r\n                this.setState({ activeCard: card });\r\n                break;\r\n        }\r\n        if (!stopEmit)\r\n            socket.emit('playedCard', { playerId: this.state.playerId, socketId: this.state.socketId, roomId: this.state.gameId.toString(), card: card });\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({\r\n            roomCode: event.target.value\r\n        });\r\n    }\r\n\r\n    JoinRoom() {\r\n        var data = {\r\n            gameId: this.state.roomCode,\r\n            playerName: 'Kaleem' || 'anon'\r\n        };\r\n        this.setState({ playerId: this.state.players.length + 1 });\r\n        socket.emit(\"playerJoinGame\", data);\r\n    }\r\n\r\n    CreateRoom() {\r\n        socket.emit(\"hostCreateNewGame\", {\r\n            gameId: null,\r\n            playerName: this.state.user.email || 'anon'\r\n        });\r\n    }\r\n\r\n    roomfull() {\r\n        // if (this.state.myRole === 'Host') {\r\n        socket.emit(\"hostRoomFull\", { gameId: this.state.gameId.toString() });\r\n        //}\r\n    }\r\n\r\n    onRoomCreated(data) {\r\n        this.setState({\r\n            myRole: 'Host',\r\n            noOfPlayers: 1,\r\n            playerId: 1,\r\n            gameId: data.gameId,\r\n            socketId: data.socketId,\r\n            showPlayArea: true,\r\n            hostText: this.state.user.email,\r\n            players: data.players\r\n        });\r\n        console.log('Room created:' + data.players.length);\r\n    }\r\n\r\n    onPlayerJoined(data) {\r\n        // if (this.state.myRole !== 'Host') {\r\n        console.log('Room joined');\r\n        this.setState({\r\n            myRole: 'Player',\r\n            noOfPlayers: 1,\r\n            gameId: data.gameId,\r\n            socketId: data.socketId,\r\n            showPlayArea: true,\r\n            players: data.players\r\n        });\r\n        // }\r\n\r\n    }\r\n\r\n    beginNewGame(data) {\r\n        console.log('Begin new game', this.state.myRole);\r\n\r\n        socket.emit('dealCardsToPlayers', { roomId: data.gameId });\r\n    }\r\n\r\n    cardDealForPlayers(data) {\r\n        this.setState({ Cards: data.cards });\r\n    }\r\n\r\n    updatePlayerId(data) {\r\n        this.setState({ playerId: data.playerId });\r\n    }\r\n\r\n    updateOtherPlayerCard(data) {\r\n        console.log(\"The player who played: \", data.playerId);\r\n        this.showCard(data.card, data.playerId, true);\r\n    }\r\n\r\n    yourTurn(data) {\r\n        console.log('Your turn called', data.playerId);\r\n        this.setState({ playerTurn: data.playerId })\r\n        switch (data.playerId) {\r\n            case 1:\r\n                this.setState({ hostTurn: true });\r\n                this.setState({ player02Turn: false })\r\n                this.setState({ player03Turn: false })\r\n                this.setState({ player04Turn: false })\r\n                break;\r\n            case 2:\r\n                this.setState({ hostTurn: false });\r\n                this.setState({ player02Turn: true })\r\n                this.setState({ player03Turn: false })\r\n                this.setState({ player04Turn: false })\r\n                break;\r\n            case 3:\r\n                this.setState({ hostTurn: false });\r\n                this.setState({ player02Turn: false })\r\n                this.setState({ player03Turn: true })\r\n                this.setState({ player04Turn: false })\r\n                break;\r\n            case 4:\r\n                this.setState({ hostTurn: false });\r\n                this.setState({ player02Turn: false })\r\n                this.setState({ player03Turn: false })\r\n                this.setState({ player04Turn: true })\r\n                break;\r\n            default:\r\n                this.setState({ hostTurn: true });\r\n                this.setState({ player02Turn: false })\r\n                this.setState({ player03Turn: false })\r\n                this.setState({ player04Turn: false })\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    mapToCardText(value) {\r\n\r\n        switch (value) {\r\n            case 11:\r\n                return 'J'\r\n                break;\r\n            case 12:\r\n                return 'Q'\r\n                break;\r\n            case 13:\r\n                return 'K'\r\n                break;\r\n            case 14:\r\n                return 'A'\r\n                break;\r\n            default:\r\n                return value;\r\n                break;\r\n        }\r\n        console.log('Youe turn called');\r\n        //this.setState({turn: true});\r\n    }\r\n\r\n    whoWonRound(data) {\r\n\r\n        this.setState({\r\n            message: \"Player \" + data.playerData.playerId + \" won the round!\",\r\n            activeCard: null, activeCardPlayer02: null, activeCardPlayer03: null, activeCardPlayer04: null\r\n        });\r\n        this.yourTurn(data.playerData);\r\n    }\r\n\r\n    render() {\r\n        const cardsItems = this.state.Cards.map((card) =>\r\n            <div class=\"card\" onClick={() => this.showCard(card, this.state.playerId)}>\r\n                <div class=\"value\">{this.mapToCardText(card.value)}\r\n                </div>\r\n                <div className={card.class}>\r\n                </div>\r\n            </div>\r\n        );\r\n        return (\r\n            <div>\r\n                <div id=\"Lobby\" style={{ display: !this.state.showPlayArea ? 'block' : 'none' }}>\r\n                    <div className=\"form-group col-3\">\r\n                        <div>\r\n                            <h1>\r\n                                {this.state.code}\r\n                            </h1>\r\n                            <div class=\"row\">\r\n                                <button className=\"btn btn-primary px-5\" onClick={this.CreateRoom}>\r\n                                    Create Room\r\n                    </button>\r\n                            </div>\r\n                            <div class=\"row\">\r\n                                <div class=\"col-12\" style={{ 'height': 20 }}></div>\r\n                            </div>\r\n\r\n                            <div class=\"row\">\r\n\r\n                                <input type=\"text\" id=\"roomNumber\" className=\"form-control\" name=\"roomNumber\" onChange={this.handleChange} value={this.state.roomCode}></input>\r\n                                <button className=\"btn btn-primary px-5\" onClick={this.JoinRoom}>\r\n                                    Join Room\r\n                    </button>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div id=\"PlayArea\" style={{ display: this.state.showPlayArea ? 'block' : 'none' }}>\r\n                    <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n\r\n                        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                            <span class=\"navbar-toggler-icon\"></span>\r\n                        </button>\r\n                        <div class=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n                            <div class=\"navbar-nav\">\r\n                                <a class=\"nav-item nav-link active\" href=\"#\">Rang card game <span class=\"sr-only\">(current)</span></a>\r\n                                <a class=\"nav-item nav-link\" href=\"#\">Distribute</a>\r\n                                <a class=\"nav-item nav-link\" href=\"#\">declare winner</a>\r\n                                <a class=\"nav-item nav-link\" href=\"#\">Endgame</a>\r\n                                <a class=\"nav-item nav-link\" href=\"#\">Choose 1 player</a>\r\n                            </div>\r\n                        </div>\r\n                    </nav>\r\n                    <div class=\"alert alert-success\" style={{ display: this.state.message !== '' ? 'block' : 'none' }} role=\"alert\">\r\n                        {this.state.message}\r\n                    </div>\r\n                    <div className='count'>\r\n                        <button type=\"button\" class=\" mb-3 btn btn-success\">\r\n                            Players online: <span class=\"badge badge-light\"> {this.state.players.length}</span>\r\n                        </button>\r\n                    </div>\r\n\r\n                    <br />\r\n\r\n                    <div class=\"row\">\r\n                        <div className={\"card text-white  mb-3 col-3 \" + (!this.state.hostTurn ? 'bg-primary' : 'bg-danger')} style={{ 'max-width': '18rem', 'float': 'left' }}>\r\n                            <div class=\"card-header\">Host</div>\r\n                            <div class=\"card-body\">\r\n                                <h5 class=\"card-title\">\r\n                                    {this.state.gameId}\r\n                                    {this.state.players.length >= 1 ? <Results /> : null}\r\n                                </h5>\r\n                                <p class=\"card-text\">\r\n                                    {this.state.hostText}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-3 mb-3\">\r\n                            <div class=\"deck\">\r\n                                <div class=\"card\" >\r\n                                    <div class=\"value\">{this.state.activeCard != null ? this.mapToCardText(this.state.activeCard.value) : ''}\r\n                                    </div>\r\n                                    <div className={this.state.activeCard != null ? this.state.activeCard.class : ''}>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-3 mb-3\" >\r\n                            <div class=\"deck\" style={{ 'float': 'right' }}>\r\n                                <div class=\"card\" >\r\n                                    <div class=\"value\">{this.state.activeCardPlayer02 != null ? this.mapToCardText(this.state.activeCardPlayer02.value) : ''}\r\n                                    </div>\r\n                                    <div className={this.state.activeCardPlayer02 != null ? this.state.activeCardPlayer02.class : ''}>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className={\"card text-white  mb-3 col-3 \" + (!this.state.player02Turn ? 'bg-primary' : 'bg-danger')} style={{ 'max-width': '18rem', 'float': 'right' }}>\r\n                            <div class=\"card-header\">{this.state.players.length >= 2 ? this.state.players[1].playerName : \"\"}</div>\r\n                            <div class=\"card-body\">\r\n                                <h5 class=\"card-title\">\r\n                                    {this.state.players.length >= 2 ? <Results /> : null}\r\n                                </h5>\r\n                                <p class=\"card-text\">player joining ...</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"row\">\r\n                        <div className={\"card text-white  mb-3 col-3 \" + (!this.state.player03Turn ? 'bg-primary' : 'bg-danger')} style={{ 'max-width': '18rem', 'float': 'left' }}>\r\n                            <div class=\"card-header\">{this.state.players.length >= 3 ? this.state.players[2].playerName : \"\"}</div>\r\n                            <div class=\"card-body\">\r\n                                <h5 class=\"card-title\">\r\n                                    {this.state.players.length >= 3 ? <Results /> : null}\r\n                                </h5>\r\n                                <p class=\"card-text\">cards coming...</p>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-3 mb-3\">\r\n                            <div class=\"deck\">\r\n                                <div class=\"card\" >\r\n                                    <div class=\"value\">{this.state.activeCardPlayer03 != null ? this.mapToCardText(this.state.activeCardPlayer03.value) : ''}\r\n                                    </div>\r\n                                    <div className={this.state.activeCardPlayer03 != null ? this.state.activeCardPlayer03.class : ''}>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-3 mb-3\" >\r\n                            <div class=\"deck\" style={{ 'float': 'right' }}>\r\n                                <div class=\"card\" >\r\n                                    <div class=\"value\">{this.state.activeCardPlayer04 != null ? this.mapToCardText(this.state.activeCardPlayer04.value) : ''}\r\n                                    </div>\r\n                                    <div className={this.state.activeCardPlayer04 != null ? this.state.activeCardPlayer04.class : ''}>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className={\"card text-white  mb-3 col-3 \" + (!this.state.player04Turn ? 'bg-primary' : 'bg-danger')} style={{ 'max-width': '18rem', 'float': 'right' }}>\r\n                            <div class=\"card-header\">{this.state.players.length >= 4 ? this.state.players[3].playerName : \"\"}</div>\r\n                            <div class=\"card-body\">\r\n                                <h5 class=\"card-title\">\r\n                                    {this.state.players.length >= 4 ? <Results /> : null}\r\n                                </h5>\r\n                                <p class=\"card-text\">player joining...</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"deck\">\r\n                        {cardsItems}\r\n                    </div>\r\n                </div >\r\n            </div >\r\n        );\r\n    }\r\n\r\n}\r\nexport default Playarea;","C:\\webapp\\RangClient\\src\\helpers\\gatherings.js",[],["74","75"],"C:\\webapp\\RangClient\\src\\helpers\\auth.js",[],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":8,"column":8,"nodeType":"82","messageId":"83","endLine":8,"endColumn":12},{"ruleId":"80","severity":1,"message":"84","line":2,"column":10,"nodeType":"82","messageId":"83","endLine":2,"endColumn":19},{"ruleId":"80","severity":1,"message":"85","line":3,"column":8,"nodeType":"82","messageId":"83","endLine":3,"endColumn":22},{"ruleId":"80","severity":1,"message":"86","line":5,"column":7,"nodeType":"82","messageId":"83","endLine":5,"endColumn":15},{"ruleId":"80","severity":1,"message":"87","line":6,"column":5,"nodeType":"82","messageId":"83","endLine":6,"endColumn":22},{"ruleId":"80","severity":1,"message":"88","line":1,"column":28,"nodeType":"82","messageId":"83","endLine":1,"endColumn":38},{"ruleId":"80","severity":1,"message":"89","line":1,"column":40,"nodeType":"82","messageId":"83","endLine":1,"endColumn":49},{"ruleId":"90","severity":1,"message":"91","line":15,"column":5,"nodeType":"92","endLine":15,"endColumn":69},{"ruleId":"93","severity":1,"message":"94","line":92,"column":22,"nodeType":"95","messageId":"96","endLine":92,"endColumn":24},{"ruleId":"97","severity":1,"message":"98","line":242,"column":17,"nodeType":"99","messageId":"100","endLine":242,"endColumn":23},{"ruleId":"97","severity":1,"message":"98","line":245,"column":17,"nodeType":"99","messageId":"100","endLine":245,"endColumn":23},{"ruleId":"97","severity":1,"message":"98","line":248,"column":17,"nodeType":"99","messageId":"100","endLine":248,"endColumn":23},{"ruleId":"97","severity":1,"message":"98","line":251,"column":17,"nodeType":"99","messageId":"100","endLine":251,"endColumn":23},{"ruleId":"97","severity":1,"message":"98","line":254,"column":17,"nodeType":"99","messageId":"100","endLine":254,"endColumn":23},{"ruleId":"97","severity":1,"message":"98","line":256,"column":9,"nodeType":"101","messageId":"100","endLine":256,"endColumn":41},{"ruleId":"102","severity":1,"message":"103","line":315,"column":33,"nodeType":"92","endLine":315,"endColumn":78},{"ruleId":"102","severity":1,"message":"103","line":316,"column":33,"nodeType":"92","endLine":316,"endColumn":71},{"ruleId":"102","severity":1,"message":"103","line":317,"column":33,"nodeType":"92","endLine":317,"endColumn":71},{"ruleId":"102","severity":1,"message":"103","line":318,"column":33,"nodeType":"92","endLine":318,"endColumn":71},{"ruleId":"102","severity":1,"message":"103","line":319,"column":33,"nodeType":"92","endLine":319,"endColumn":71},{"ruleId":"76","replacedBy":"104"},{"ruleId":"78","replacedBy":"105"},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Gathering' is defined but never used.","'socketIOClient' is defined but never used.","'ENDPOINT' is assigned a value but never used.","'connectionOptions' is assigned a value but never used.","'useContext' is defined but never used.","'useEffect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","ExpressionStatement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["106"],["107"],"no-global-assign","no-unsafe-negation"]