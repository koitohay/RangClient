[{"C:\\webapp\\RangClient\\src\\index.js":"1","C:\\webapp\\RangClient\\src\\reportWebVitals.js":"2","C:\\webapp\\RangClient\\src\\App.js":"3","C:\\webapp\\RangClient\\src\\pages\\signup.js":"4","C:\\webapp\\RangClient\\src\\pages\\home.js":"5","C:\\webapp\\RangClient\\src\\pages\\login.js":"6","C:\\webapp\\RangClient\\src\\services\\firebase.js":"7","C:\\webapp\\RangClient\\src\\pages\\playarea.js":"8","C:\\webapp\\RangClient\\src\\helpers\\gatherings.js":"9","C:\\webapp\\RangClient\\src\\helpers\\auth.js":"10","C:\\webapp\\RangClient\\src\\components\\Header.js":"11","C:\\webapp\\RangClient\\src\\components\\Footer.js":"12"},{"size":547,"mtime":1610658971657,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1608320061558,"results":"15","hashOfConfig":"14"},{"size":2310,"mtime":1611749664994,"results":"16","hashOfConfig":"14"},{"size":2673,"mtime":1609185071704,"results":"17","hashOfConfig":"14"},{"size":995,"mtime":1609176412625,"results":"18","hashOfConfig":"14"},{"size":3477,"mtime":1611787815229,"results":"19","hashOfConfig":"14"},{"size":368,"mtime":1611748917289,"results":"20","hashOfConfig":"14"},{"size":23222,"mtime":1612118845449,"results":"21","hashOfConfig":"14"},{"size":2240,"mtime":1609198012411,"results":"22","hashOfConfig":"14"},{"size":477,"mtime":1611787684583,"results":"23","hashOfConfig":"14"},{"size":1414,"mtime":1611841255248,"results":"24","hashOfConfig":"14"},{"size":278,"mtime":1611789998408,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"tiuqur",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\webapp\\RangClient\\src\\index.js",[],["54","55"],"C:\\webapp\\RangClient\\src\\reportWebVitals.js",[],"C:\\webapp\\RangClient\\src\\App.js",[],"C:\\webapp\\RangClient\\src\\pages\\signup.js",[],"C:\\webapp\\RangClient\\src\\pages\\home.js",[],"C:\\webapp\\RangClient\\src\\pages\\login.js",[],"C:\\webapp\\RangClient\\src\\services\\firebase.js",[],"C:\\webapp\\RangClient\\src\\pages\\playarea.js",["56"],"import React, { Component } from 'react';\r\nimport { Modal, Button } from 'react-bootstrap'\r\nimport greenImg from '../icons/iconfinder_Circle_Green_34211.png';\r\nimport '../styles.css';\r\nimport { auth } from \"../services/firebase\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport configData from \"../config.json\";\r\nimport Header from \"../components/Header\";\r\nimport Footer from \"../components/Footer\";\r\n\r\nconst ENDPOINT = process.env.NODE_ENV === \"development\" ? configData.DEV_SERVER_URL : configData.PROD_SERVER_URL;\r\nlet connectionOptions = {\r\n    \"force new connection\": true,\r\n    \"reconnectionAttempts\": \"Infinity\", //avoid having user reconnect manually in order to prevent dead clients after a server restart\r\n    \"timeout\": 10000,                  //before connect_error and connect_timeout are emitted.\r\n    \"transports\": [\"websocket\"]\r\n};\r\n\r\nconst Results = () => (\r\n    <img src={greenImg} style={{ width: \"16px\", height: \"16px\" }} />\r\n);\r\n\r\nconst refreshPage = () => {\r\n    window.location.reload();\r\n}\r\n\r\nlet socket = null;\r\nclass Playarea extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: auth().currentUser,\r\n            error: null,\r\n            players: [],\r\n            Cards: [],\r\n            playerId: null,\r\n            activeCard: null,\r\n            showPlayArea: false,\r\n            roomCode: null,\r\n            myRole: '',\r\n            noOfPlayers: 0,\r\n            gameId: null,\r\n            playerName: null,\r\n            socketId: null,\r\n            playerTurn: 0,\r\n            message: '',\r\n            playerWonMessage: '',\r\n            showModal: false,\r\n            rangSelectionCards: [],\r\n            rangOfGame: '',\r\n            gameMessage: '',\r\n            closeModal: null\r\n        };\r\n\r\n        this.baseState = this.state;\r\n        this.showCard = this.showCard.bind(this);\r\n        this.CreateRoom = this.CreateRoom.bind(this);\r\n\r\n        this.onRoomCreated = this.onRoomCreated.bind(this);\r\n        this.onPlayerJoined = this.onPlayerJoined.bind(this);\r\n        this.beginNewGame = this.beginNewGame.bind(this);\r\n        this.roomfull = this.roomfull.bind(this);\r\n        this.mapToCardText = this.mapToCardText.bind(this);\r\n\r\n        this.cardDealForPlayers = this.cardDealForPlayers.bind(this);\r\n        this.updatePlayerId = this.updatePlayerId.bind(this);\r\n        this.updateOtherPlayerCard = this.updateOtherPlayerCard.bind(this);\r\n        this.yourTurn = this.yourTurn.bind(this);\r\n        this.whoWonRound = this.whoWonRound.bind(this);\r\n        this.endGame = this.endGame.bind(this);\r\n        this.JoinRoom = this.JoinRoom.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleChangeName = this.handleChangeName.bind(this);\r\n        this.selectRangForGame = this.selectRangForGame.bind(this);\r\n        this.rangSelected = this.rangSelected.bind(this);\r\n        this.showModalClose = this.showModalClose.bind(this);\r\n        this.endGameButtonClicked = this.endGameButtonClicked.bind(this);\r\n        this.gameEnded = this.gameEnded.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        var that = this;\r\n\r\n        socket = socketIOClient(ENDPOINT, connectionOptions);\r\n\r\n        // room created\r\n        socket.on('newGameCreated', this.onRoomCreated);\r\n\r\n        // room created\r\n        socket.on('playerJoinedRoom', this.onPlayerJoined);\r\n\r\n        // begin new game\r\n        socket.on('beginNewGame', this.beginNewGame);\r\n        socket.on('yourTurn', this.yourTurn);\r\n\r\n        // deal cards for players\r\n        socket.on('cardDealForPlayers', this.cardDealForPlayers);\r\n        socket.on('updatePlayerId', this.updatePlayerId);\r\n        socket.on('updateOtherPlayerCard', this.updateOtherPlayerCard);\r\n        socket.on('whoWonRound', this.whoWonRound);\r\n        socket.on('selectRangForGame', this.selectRangForGame);\r\n        socket.on('rangSelected', this.rangSelected);\r\n\r\n        //room full start game\r\n        socket.on('roomfull', this.roomfull);\r\n\r\n        socket.on('endGame', this.endGame);\r\n        socket.on('gameEnded', this.gameEnded);\r\n\r\n        // Error event\r\n        socket.on('error', (e) => {\r\n            that.setState({\r\n                modalTitle: \"Error\",\r\n                playerWonMessage: e.message,\r\n                showModal: true\r\n            });\r\n            console.error(e);\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n    }\r\n\r\n    showCard(card, playerId, stopEmit) {\r\n\r\n        if (playerId !== this.state.playerTurn)\r\n            return;\r\n\r\n        var arrayOfCards = [...this.state.Cards];\r\n        var indexOfCard = arrayOfCards.indexOf(card);\r\n        if (indexOfCard !== -1) {\r\n            arrayOfCards.splice(indexOfCard, 1);\r\n            this.setState({ Cards: arrayOfCards });\r\n        }\r\n\r\n        switch (playerId) {\r\n            case 1:\r\n                this.setState({ activeCard: card });\r\n                break;\r\n            case 2:\r\n                this.setState({ activeCardPlayer02: card });\r\n                break;\r\n            case 3:\r\n                this.setState({ activeCardPlayer03: card });\r\n                break;\r\n            case 4:\r\n                this.setState({ activeCardPlayer04: card });\r\n                break;\r\n            default:\r\n                this.setState({ activeCard: card });\r\n                break;\r\n        }\r\n        if (!stopEmit)\r\n            socket.emit('playedCard', { playerId: this.state.playerId, socketId: this.state.socketId, roomId: this.state.gameId.toString(), card: card });\r\n    }\r\n\r\n    handleChangeName(event) {\r\n        this.setState({\r\n            playerName: event.target.value\r\n        });\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({\r\n            gameId: event.target.value\r\n        });\r\n    }\r\n\r\n    JoinRoom() {\r\n        if (this.state.playerName != null && this.state.gameId != null) {\r\n            var data = {\r\n                gameId: this.state.gameId,\r\n                playerName: this.state.playerName || 'anon'\r\n            };\r\n            this.setState({ playerId: this.state.players.length + 1 });\r\n            socket.emit(\"playerJoinGame\", data);\r\n        }\r\n    }\r\n\r\n    CreateRoom() {\r\n        socket.emit(\"hostCreateNewGame\", {\r\n            gameId: null,\r\n            playerName: this.state.user.email || 'anon'\r\n        });\r\n    }\r\n\r\n    roomfull() {\r\n        socket.emit(\"hostRoomFull\", { gameId: this.state.gameId.toString() });\r\n    }\r\n\r\n    onRoomCreated(data) {\r\n        this.setState({\r\n            myRole: 'Host',\r\n            noOfPlayers: 1,\r\n            playerId: 1,\r\n            gameId: data.gameId,\r\n            socketId: data.socketId,\r\n            showPlayArea: true,\r\n            hostText: this.state.user.email,\r\n            players: data.players\r\n        });\r\n        console.log('Room created:' + data.players.length);\r\n    }\r\n\r\n    onPlayerJoined(data) {\r\n        console.log('Room joined');\r\n        this.setState({\r\n            myRole: 'Player',\r\n            noOfPlayers: 1,\r\n            gameId: data.gameId,\r\n            socketId: data.socketId,\r\n            showPlayArea: true,\r\n            players: data.players\r\n        });\r\n    }\r\n\r\n    beginNewGame(data) {\r\n        console.log('Begin new game', this.state.myRole);\r\n        socket.emit('getCardForRangSelection', { roomId: data.gameId });\r\n    }\r\n\r\n    sendSelectionOfRang(card) {\r\n        this.setState({\r\n            modalTitle: \"\",\r\n            playerWonMessage: \"\",\r\n            showModal: false,\r\n            rangSelectionCards: []\r\n        })\r\n        socket.emit('dealCardsToPlayers', { roomId: this.state.gameId, selectedCards: this.state.rangSelectionCards, selectedRang: card });\r\n    }\r\n\r\n    selectRangForGame(data) {\r\n        console.log(\"Select the rang called\");\r\n        this.setState({\r\n            modalTitle: \"Select rang!\",\r\n            gameMessage: \"Player 1 selecting rang for the game!\",\r\n            playerWonMessage: \"Please select rang from the following cards.\",\r\n            showModal: true,\r\n            rangSelectionCards: data.cards\r\n        });\r\n    }\r\n\r\n    rangSelected(data) {\r\n        this.setState({ rangOfGame: data.rang, gameMessage: \"Game started!\" })\r\n    }\r\n\r\n    cardDealForPlayers(data) {\r\n        this.setState({ Cards: data.cards });\r\n    }\r\n\r\n    updatePlayerId(data) {\r\n        this.setState({ playerId: data.playerId });\r\n    }\r\n\r\n    updateOtherPlayerCard(data) {\r\n        console.log(\"The player who played: \", data.playerId);\r\n        this.showCard(data.card, data.playerId, true);\r\n    }\r\n\r\n    yourTurn(data) {\r\n        console.log('Your turn called', data.playerId);\r\n\r\n        if (data.clearCards)\r\n            this.setState({\r\n                playerTurn: data.playerId,\r\n                gameMessage: \"\",\r\n                activeCard: null, activeCardPlayer02: null, activeCardPlayer03: null, activeCardPlayer04: null\r\n            });\r\n        else\r\n            this.setState({ playerTurn: data.playerId })\r\n\r\n        switch (data.playerId) {\r\n            case 1:\r\n                this.setState({\r\n                    hostTurn: true,\r\n                    gameMessage: \"Player \" + data.playerId + \" turn!\",\r\n                    player02Turn: false, player03Turn: false, player04Turn: false\r\n                });\r\n                break;\r\n            case 2:\r\n                this.setState({\r\n                    hostTurn: false,\r\n                    gameMessage: \"Player \" + data.playerId + \" turn!\",\r\n                    player02Turn: true, player03Turn: false, player04Turn: false\r\n                });\r\n                break;\r\n            case 3:\r\n                this.setState({\r\n                    hostTurn: false,\r\n                    gameMessage: \"Player \" + data.playerId + \" turn!\",\r\n                    player02Turn: false, player03Turn: true, player04Turn: false\r\n                });\r\n                break;\r\n            case 4:\r\n                this.setState({\r\n                    hostTurn: false,\r\n                    gameMessage: \"Player \" + data.playerId + \" turn!\",\r\n                    player02Turn: false, player03Turn: false, player04Turn: true\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    hostTurn: true,\r\n                    gameMessage: \"Player \" + data.playerId + \" turn!\",\r\n                    player02Turn: false, player03Turn: false, player04Turn: false\r\n                });\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    mapToCardText(value) {\r\n\r\n        switch (value) {\r\n            case 11:\r\n                return 'J'\r\n            case 12:\r\n                return 'Q'\r\n            case 13:\r\n                return 'K'\r\n            case 14:\r\n                return 'A'\r\n            default:\r\n                return value;\r\n        }\r\n    }\r\n\r\n    whoWonRound(data) {\r\n\r\n        this.setState({\r\n            message: \"Player \" + data.winner.playerData.playerId + \" won the round!\",\r\n            activeCard: null, activeCardPlayer02: null, activeCardPlayer03: null, activeCardPlayer04: null\r\n        });\r\n\r\n        var thisComponent = this;\r\n        setTimeout(function () {\r\n            thisComponent.setState({ message: '' });\r\n        }, 10000);\r\n\r\n        this.yourTurn(data);\r\n    }\r\n\r\n    endGame(data) {\r\n        console.log(data.gameWinner);\r\n        this.setState({\r\n            modalTitle: \"Game ended!\",\r\n            playerWonMessage: \"Team with players \" + data.gameWinner.playerNames + \" won the game by winning \" + data.gameWinner.roundsWon + \" rounds!\",\r\n            showModal: true,\r\n            closeModal: refreshPage,\r\n            activeCard: null, activeCardPlayer02: null, activeCardPlayer03: null, activeCardPlayer04: null\r\n        });\r\n    }\r\n\r\n    gameEnded(data) {\r\n        this.setState({\r\n            modalTitle: \"Game ended!\",\r\n            playerWonMessage: \"One or more players left the room, you need to restart game.\",\r\n            showModal: true,\r\n            closeModal: refreshPage,\r\n        });\r\n    }\r\n\r\n    endGameButtonClicked(e) {\r\n        socket.emit(\"gameEnded\", { gameId: this.state.gameId, socketId: this.state.socketId, playerId: this.state.playerId });\r\n        refreshPage();\r\n    }\r\n\r\n    showModalClose() {\r\n        if (this.state.closeModal)\r\n            this.state.closeModal();\r\n\r\n        this.setState({\r\n            showModal: false,\r\n            closeModal: null\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const cardsItems = this.state.Cards.map((card) =>\r\n            <div class=\"card\" onClick={() => this.showCard(card, this.state.playerId)}>\r\n                <div class=\"value\">{this.mapToCardText(card.value)}\r\n                </div>\r\n                <div className={card.class}>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        const rangSelectionCards = this.state.rangSelectionCards.map((card) =>\r\n            <div class=\"card\" onClick={() => this.sendSelectionOfRang(card)}>\r\n                <div class=\"value\">{this.mapToCardText(card.value)}\r\n                </div>\r\n                <div className={card.class}>\r\n                </div>\r\n            </div>\r\n        );\r\n        return (\r\n            <div>\r\n                <Header onEndGame={this.endGameButtonClicked} />\r\n                <div>\r\n                    <div id=\"Lobby\" style={{ display: !this.state.showPlayArea ? 'block' : 'none' }}>\r\n                        <div class=\"container h-100 play-area\">\r\n                            <div class=\"row h-100 justify-content-center align-items-center\">\r\n                                <div class=\"col-10 col-md-8 col-lg-6\">\r\n                                    <div className=\"form-group\">\r\n\r\n                                        <button className=\"btn btn-primary form-control\" onClick={this.CreateRoom}>\r\n                                            Create Room\r\n                                </button>\r\n                                        <br></br>\r\n                        Name: <input type=\"text\" id=\"nameOfPlayer\" className=\"form-control\" name=\"nameOfPlayer\" onChange={this.handleChangeName} value={this.state.playerName}></input>\r\n                        Room Id: <input type=\"text\" id=\"roomNumber\" className=\"form-control\" name=\"roomNumber\" onChange={this.handleChange} value={this.state.gameId}></input>\r\n                                        <button className=\"btn btn-primary form-control\" onClick={this.JoinRoom}>\r\n                                            Join Room\r\n                                 </button>\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div id=\"PlayArea\" className=\"play-area\" style={{ display: this.state.showPlayArea ? 'block' : 'none' }}>\r\n\r\n                        <div className=\"alert alert-success\" style={{ display: this.state.message !== '' ? 'block' : 'none' }} role=\"alert\">\r\n                            {this.state.message}\r\n                        </div>\r\n                        <div className='row'>\r\n                            <button type=\"button\" class=\" mb-3 btn btn-success\">\r\n                                Players online: <span class=\"badge badge-light\"> {this.state.players.length}</span>\r\n                            </button>\r\n                            <div class=\"col-3\" style={{ 'float': 'right', display: this.state.rangOfGame !== '' ? 'block' : 'none' }}>\r\n                                <div class={\"cardSmall \" + (this.state.rangOfGame) + \"Small\"}></div>\r\n                            </div>\r\n                            <div class=\"col-3\" style={{ 'float': 'right', display: this.state.rangOfGame === '' ? 'block' : 'none' }}>\r\n                                Rang is not selected yet!\r\n                        </div>\r\n                            <div class=\"col-3\" style={{ 'float': 'right', display: this.state.gameMessage !== \"\" ? 'block' : 'none' }}>\r\n                                {this.state.gameMessage}\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <br />\r\n\r\n                        <div class=\"row\">\r\n                            <div className={\"card text-white mb-3 col-3 \" + (!this.state.hostTurn ? 'bg-primary' : 'bg-danger')} style={{ 'max-width': '18rem', 'float': 'left' }}>\r\n                                <div class=\"card-header\">Host</div>\r\n                                <div class=\"card-body\">\r\n                                    <h5 class=\"card-title\">\r\n                                        {this.state.gameId}\r\n                                        {this.state.players.length >= 1 ? <Results /> : null}\r\n                                    </h5>\r\n                                    <p class=\"card-text\">\r\n                                        {this.state.hostText}\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"col-3 mb-3\">\r\n                                <div class=\"deck\">\r\n                                    <div class=\"card\" >\r\n                                        <div class=\"value\">{this.state.activeCard != null ? this.mapToCardText(this.state.activeCard.value) : ''}\r\n                                        </div>\r\n                                        <div className={this.state.activeCard != null ? this.state.activeCard.class : ''}>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"col-3 mb-3\" >\r\n                                <div class=\"deck\" style={{ 'float': 'right' }}>\r\n                                    <div class=\"card\" >\r\n                                        <div class=\"value\">{this.state.activeCardPlayer02 != null ? this.mapToCardText(this.state.activeCardPlayer02.value) : ''}\r\n                                        </div>\r\n                                        <div className={this.state.activeCardPlayer02 != null ? this.state.activeCardPlayer02.class : ''}>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className={\"card text-white  mb-3 col-3 \" + (!this.state.player02Turn ? 'bg-success' : 'bg-danger')} style={{ 'max-width': '18rem', 'float': 'right' }}>\r\n                                <div class=\"card-header\">{this.state.players.length >= 2 ? this.state.players[1].playerName : \"\"}</div>\r\n                                <div class=\"card-body\">\r\n                                    <h5 class=\"card-title\">\r\n                                        {this.state.players.length >= 2 ? <Results /> : null}\r\n                                    </h5>\r\n                                    <p class=\"card-text\">player joining ...</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"row\">\r\n\r\n                            <div className={\"card text-white  mb-3 col-3 \" + (!this.state.player04Turn ? 'bg-success' : 'bg-danger')} style={{ 'max-width': '18rem', 'float': 'right' }}>\r\n                                <div class=\"card-header\">{this.state.players.length >= 4 ? this.state.players[3].playerName : \"\"}</div>\r\n                                <div class=\"card-body\">\r\n                                    <h5 class=\"card-title\">\r\n                                        {this.state.players.length >= 4 ? <Results /> : null}\r\n                                    </h5>\r\n                                    <p class=\"card-text\">player joining...</p>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"col-3 mb-3\" >\r\n                                <div class=\"deck\" style={{ 'float': 'left' }}>\r\n                                    <div class=\"card\" >\r\n                                        <div class=\"value\">{this.state.activeCardPlayer04 != null ? this.mapToCardText(this.state.activeCardPlayer04.value) : ''}\r\n                                        </div>\r\n                                        <div className={this.state.activeCardPlayer04 != null ? this.state.activeCardPlayer04.class : ''}>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"col-3 mb-3\">\r\n                                <div class=\"deck\" style={{ 'float': 'right' }}>\r\n                                    <div class=\"card\" >\r\n                                        <div class=\"value\">{this.state.activeCardPlayer03 != null ? this.mapToCardText(this.state.activeCardPlayer03.value) : ''}\r\n                                        </div>\r\n                                        <div className={this.state.activeCardPlayer03 != null ? this.state.activeCardPlayer03.class : ''}>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className={\"card text-white  mb-3 col-3 \" + (!this.state.player03Turn ? 'bg-primary' : 'bg-danger')} style={{ 'max-width': '18rem', 'float': 'left' }}>\r\n                                <div class=\"card-header\">{this.state.players.length >= 3 ? this.state.players[2].playerName : \"\"}</div>\r\n                                <div class=\"card-body\">\r\n                                    <h5 class=\"card-title\">\r\n                                        {this.state.players.length >= 3 ? <Results /> : null}\r\n                                    </h5>\r\n                                    <p class=\"card-text\">cards coming...</p>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div class=\"row\">\r\n                            <div className=\"deck\">\r\n                                {cardsItems}\r\n                            </div>\r\n                        </div>\r\n                    </div >\r\n                    <Modal show={this.state.showModal}\r\n                        onHide={() => this.setState({ showModal: false })}>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title>{this.state.modalTitle}</Modal.Title>\r\n                        </Modal.Header>\r\n\r\n                        <Modal.Body>\r\n                            <p>{this.state.playerWonMessage}</p>\r\n                            <div className=\"deck\">\r\n                                {rangSelectionCards}\r\n                            </div>\r\n                        </Modal.Body>\r\n\r\n                        <Modal.Footer>\r\n                            <Button variant=\"secondary\" onClick={this.showModalClose}>Close</Button>\r\n                        </Modal.Footer>\r\n                    </Modal>\r\n                </div >\r\n                <Footer />\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\nexport default Playarea;","C:\\webapp\\RangClient\\src\\helpers\\gatherings.js",[],["57","58"],"C:\\webapp\\RangClient\\src\\helpers\\auth.js",[],"C:\\webapp\\RangClient\\src\\components\\Header.js",["59"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { auth } from '../services/firebase';\r\n\r\nfunction Header(props) {\r\n\r\n\r\n  return (\r\n    <header>\r\n      <nav className=\"navbar navbar-expand-lg fixed-top navbar-light bg-light\" role=\"navigation\">\r\n        <a className=\"navbar-brand\" href=\"#\">Rang card game</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n\r\n        <div className=\"collapse navbar-collapse justify-content-end\" id=\"navbarNavAltMarkup\">\r\n          {auth().currentUser\r\n            ? <ul className=\"navbar-nav\">\r\n              <li class=\"nav-item \"><Link className=\"nav-link mr-3\" href=\"#\" onClick={props.onEndGame}>Endgame</Link></li>\r\n\r\n              <li class=\"nav-item \"> <button className=\"btn btn-primary mr-3\" onClick={() => auth().signOut()}>Logout</button></li>\r\n            </ul>\r\n            : <ul className=\"navbar-nav\">\r\n              <li class=\"nav-item \"><Link className=\"nav-link mr-3\" to=\"/login\">Sign In</Link></li>\r\n              <li class=\"nav-item \"><Link className=\"nav-link mr-3\" to=\"/signup\">Sign Up</Link></li>\r\n            </ul>}\r\n\r\n        </div>\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","C:\\webapp\\RangClient\\src\\components\\Footer.js",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":20,"column":5,"nodeType":"66","endLine":20,"endColumn":69},{"ruleId":"60","replacedBy":"67"},{"ruleId":"62","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":11,"column":9,"nodeType":"66","endLine":11,"endColumn":46},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["71"],["72"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation"]